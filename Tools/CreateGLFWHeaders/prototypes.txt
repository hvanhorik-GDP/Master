typedef void (*glproc)(void);
typedef void (*vkproc)(void);
typedef struct monitor monitor;
typedef struct window window;
typedef struct cursor cursor;
typedef void (* errorfun)(int,const char*);
typedef void (* windowposfun)(window*,int,int);
typedef void (* windowsizefun)(window*,int,int);
typedef void (* windowclosefun)(window*);
typedef void (* windowrefreshfun)(window*);
typedef void (* windowfocusfun)(window*,int);
typedef void (* windowiconifyfun)(window*,int);
typedef void (* framebuffersizefun)(window*,int,int);
typedef void (* mousebuttonfun)(window*,int,int,int);
typedef void (* cursorposfun)(window*,double,double);
typedef void (* cursorenterfun)(window*,int);
typedef void (* scrollfun)(window*,double,double);
typedef void (* keyfun)(window*,int,int,int,int);
typedef void (* charfun)(window*,unsigned int);
typedef void (* charmodsfun)(window*,unsigned int,int);
typedef void (* dropfun)(window*,int,const char**);
typedef void (* monitorfun)(monitor*,int);
typedef void (* joystickfun)(int,int);
typedef struct vidmode
typedef struct gammaramp
typedef struct image
//
// Other
//
namespace Other
{
 VkResult CreateWindowSurface(VkInstance instance, window* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);
 charfun SetCharCallback(window* window, charfun cbfun);
 charmodsfun SetCharModsCallback(window* window, charmodsfun cbfun);
 const char* GetClipboardString(window* window);
 const char* GetJoystickName(int joy);
 const char* GetKeyName(int key, int scancode);
 const char* GetMonitorName(monitor* monitor);
 const char* GetVersionString(void);
 const char** GetRequiredInstanceExtensions(uint32_t* count);
 const float* GetJoystickAxes(int joy, int* count);
 const gammaramp* GetGammaRamp(monitor* monitor);
 const unsigned char* GetJoystickButtons(int joy, int* count);
 const vidmode* GetVideoMode(monitor* monitor);
 const vidmode* GetVideoModes(monitor* monitor, int* count);
 cursor* CreateCursor(const image* image, int xhot, int yhot);
 cursor* CreateStandardCursor(int shape);
 cursorenterfun SetCursorEnterCallback(window* window, cursorenterfun cbfun);
 cursorposfun SetCursorPosCallback(window* window, cursorposfun cbfun);
 double GetTime(void);
 dropfun SetDropCallback(window* window, dropfun cbfun);
 errorfun SetErrorCallback(errorfun cbfun);
 framebuffersizefun SetFramebufferSizeCallback(window* window, framebuffersizefun cbfun);
 glproc GetProcAddress(const char* procname);
 int ExtensionSupported(const char* extension);
 int GetInputMode(window* window, int mode);
 int GetKey(window* window, int key);
 int GetMouseButton(window* window, int button);
 int GetPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily);
 int GetWindowAttrib(window* window, int attrib);
 int Init(void);
 int JoystickPresent(int joy);
 int VulkanSupported(void);
 int WindowShouldClose(window* window);
 joystickfun SetJoystickCallback(joystickfun cbfun);
 keyfun SetKeyCallback(window* window, keyfun cbfun);
 monitor* GetPrimaryMonitor(void);
 monitor* GetWindowMonitor(window* window);
 monitor** GetMonitors(int* count);
 monitorfun SetMonitorCallback(monitorfun cbfun);
 mousebuttonfun SetMouseButtonCallback(window* window, mousebuttonfun cbfun);
 scrollfun SetScrollCallback(window* window, scrollfun cbfun);
 uint64_t GetTimerFrequency(void);
 uint64_t GetTimerValue(void);
 vkproc GetInstanceProcAddress(VkInstance instance, const char* procname);
 void DefaultWindowHints(void);
 void DestroyCursor(cursor* cursor);
 void DestroyWindow(window* window);
 void FocusWindow(window* window);
 void GetCursorPos(window* window, double* xpos, double* ypos);
 void GetFramebufferSize(window* window, int* width, int* height);
 void GetMonitorPhysicalSize(monitor* monitor, int* widthMM, int* heightMM);
 void GetMonitorPos(monitor* monitor, int* xpos, int* ypos);
 void GetVersion(int* major, int* minor, int* rev);
 void GetWindowFrameSize(window* window, int* left, int* top, int* right, int* bottom);
 void GetWindowPos(window* window, int* xpos, int* ypos);
 void GetWindowSize(window* window, int* width, int* height);
 void HideWindow(window* window);
 void IconifyWindow(window* window);
 void MakeContextCurrent(window* window);
 void MaximizeWindow(window* window);
 void PollEvents(void);
 void PostEmptyEvent(void);
 void RestoreWindow(window* window);
 void SetClipboardString(window* window, const char* string);
 void SetCursor(window* window, cursor* cursor);
 void SetCursorPos(window* window, double xpos, double ypos);
 void SetGamma(monitor* monitor, float gamma);
 void SetGammaRamp(monitor* monitor, const gammaramp* ramp);
 void SetInputMode(window* window, int mode, int value);
 void SetTime(double time);
 void SetWindowAspectRatio(window* window, int numer, int denom);
 void SetWindowIcon(window* window, int count, const image* images);
 void SetWindowMonitor(window* window, monitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
 void SetWindowPos(window* window, int xpos, int ypos);
 void SetWindowShouldClose(window* window, int value);
 void SetWindowSize(window* window, int width, int height);
 void SetWindowSizeLimits(window* window, int minwidth, int minheight, int maxwidth, int maxheight);
 void SetWindowTitle(window* window, const char* title);
 void SetWindowUserPointer(window* window, void* pointer);
 void ShowWindow(window* window);
 void SwapBuffers(window* window);
 void SwapInterval(int interval);
 void Terminate(void);
 void WaitEvents(void);
 void WaitEventsTimeout(double timeout);
 void WindowHint(int hint, int value);
 void* GetWindowUserPointer(window* window);
 window* CreateWindow(int width, int height, const char* title, monitor* monitor, window* share);
 window* GetCurrentContext(void);
 windowclosefun SetWindowCloseCallback(window* window, windowclosefun cbfun);
 windowfocusfun SetWindowFocusCallback(window* window, windowfocusfun cbfun);
 windowiconifyfun SetWindowIconifyCallback(window* window, windowiconifyfun cbfun);
 windowposfun SetWindowPosCallback(window* window, windowposfun cbfun);
 windowrefreshfun SetWindowRefreshCallback(window* window, windowrefreshfun cbfun);
 windowsizefun SetWindowSizeCallback(window* window, windowsizefun cbfun);
}	 // Other

